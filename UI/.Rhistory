require(xlsx)
setwd("~/Desktop/TrungThienApps/DoanhSoBan/")
require(xlsx)
install.packages("rJava")
require(xlsx)
setwd("~/Desktop/TrungThienApps/DoanhSoBan/")
require(xlsx)
require(xlsx)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
options('java.home')
options("java.home"="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre")
require(xlsx)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_66.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
setwd("~/Desktop/TrungThienApps/DoanhSoBan/")
require(xlsx)
Sys.setenv(LD_LIBRARY_PATH='$JAVA_HOME/jre/lib/server')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home')
require(xlsx)
options("java.home"="/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home/jre")
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home')
Sys.setenv(LD_LIBRARY_PATH='$JAVA_HOME/jre/lib/server')
install.packages("rJava")
require(xlsx)
install.packages("rJava",type="source")
require(xlsx)
install.packages("rJava",type="source")
install.packages("rJava")
require(xlsx)
require(xlsx)
setwd("~/Desktop/TrungThienApps/DoanhSoBan/")
require(xlsx)
require(rJava)
install.packages("rJava")
require(rJava)
require(xlsx)
install.packages("shiny")
install.packages("shinydashboard")
1140*52*400+180
400+180
580*52/490
42640/550000
6*52
730*0.12
225+215+260+216+250
1166*52
60600/1100000
530*0.02
140*12*52
0.89*4.5
shiny::runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
runApp('Downloads/TieqViet')
915+149
2716/1715
(10*60+49)/(6*60+46)
1.7/2.2
280*2+350
910*52*0.7
280*52/200000
250*52/175
0.78*4.5
0.68*4.5
10000*0.04
400/12
5.8*0.75
200*25
4.5*0.75
4.5*0.65
48/3
15/16
48/30
15/1.6
20*1024*1024
100*1024*1024
120*1024*1024
10*70
13800*12
290*4.33*4
5022.8*0.7
250*4.33*9
9742.5*0.7
6819+3516
36567+10335
2294/4
2739/4
6790/4
48000/52*2
145+145+155+175
620*52
32240/400000
rm(list=ls())
require(knitr); require(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.kable.NA = '')
require(dplyr); require(openxlsx)
require(readxl)
require(RSQLite)
# read configuration file and build paths
homePath <- path.expand('~')
pathData <- read.csv(file.path(homePath,'softanageConf.csv'))
appPath <- file.path(homePath,pathData$Value[pathData$Name=='appPath'])
scriptPath <- file.path(homePath,pathData$Value[pathData$Name=='scriptPath'])
outputPath <- file.path(homePath,pathData$Value[pathData$Name=='outputPath'])
setwd(outputPath)
# some control variables
mfgName <- 'DiaSorin-My'
# loading functions
source(file.path(scriptPath,'ManellaHelper.R'))
outputData$giaMinhTam <- formatC(outputData$giaMinhTam, format="d", big.mark=",")
rm(list=ls())
require(knitr); require(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
options(knitr.kable.NA = '')
require(dplyr); require(openxlsx)
require(readxl)
require(RSQLite)
# read configuration file and build paths
homePath <- path.expand('~')
pathData <- read.csv(file.path(homePath,'softanageConf.csv'))
appPath <- file.path(homePath,pathData$Value[pathData$Name=='appPath'])
scriptPath <- file.path(homePath,pathData$Value[pathData$Name=='scriptPath'])
outputPath <- file.path(homePath,pathData$Value[pathData$Name=='outputPath'])
setwd(outputPath)
# some control variables
mfgName <- 'DiaSorin-My'
# loading functions
source(file.path(scriptPath,'ManellaHelper.R'))
# old style folder setup
masterView <- file.path(appPath,"masterView.sqlite")
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver,
dbname = masterView)
## List and load tables
# dbListTables(conn)
salesData <- dbReadTable(conn,"chiTietXuatKho")
packaging <- dbReadTable(conn,"bangQuyCach")
tenderDetails <- dbReadTable(conn,"chiTietThau")
productInfos <- dbReadTable(conn,"danhMucHangHoa")
priceList <- dbReadTable(conn,"giaNhapHang")
exchangeRate <-  dbReadTable(conn,"tiGiaNgoaiTe")
tonKho <- dbReadTable(conn,"tonKho")
dbDisconnect(conn)
# we first start with productInfos
productInfos <- productInfos[productInfos$NSX==mfgName,]
# add direct import price & Mitalab price
productInfos <- merge(productInfos, priceList %>%
filter(priceType=='1' & Vendor == 'directImport') %>%
select(prodCode,importPrice, importCurrency = Currency),
all.x=T, by = 'prodCode')
productInfos <- convertToVND(productInfos,exchangeRate,'importPrice','importCurrency')
productInfos <- merge(productInfos, priceList %>%
filter(priceType=='9' & Vendor == 'Mitalab') %>%
select(prodCode,MitalabPrice = importPrice),
all.x=T, by = 'prodCode')
tenderDetails <- cleanTenderDetails(tenderDetails,packaging)
productInfos <- merge(productInfos,tenderDetails %>%
select(prodCode,tenderPricePack = packPrice),
all.x=T,by='prodCode')
outputData <- productInfos %>% select(Ten=Name,REF=mfgCode,giaNhapVND=importPriceVND,
giaMinhTam=MitalabPrice,giaThauCR=tenderPricePack)
outputData$giaNhapVND <- formatC(outputData$giaNhapVND, format="d", big.mark=",")
outputData$giaMinhTam <- formatC(outputData$giaMinhTam, format="d", big.mark=",")
outputData$giaThauCR <- formatC(outputData$giaThauCR, format="d", big.mark=",")
library(xlsx)
write.xlsx(outputData, file.path(outputPath,'soSanhGiaMitalab.xlsx'),showNA = FALSE)
kable(outputData)
View(outputData)
rm(list=ls())
require(knitr); require(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
require(dplyr); require(openxlsx)
require(readxl);require(RSQLite)
library(xlsx)
# read configuration file and build paths
# in Rmd we directly access the config file of Softanage
homePath <- path.expand('~')
pathData <- read.csv(file.path(homePath,'softanageConf.csv'))
appPath <- file.path(homePath,pathData$Value[pathData$Name=='appPath'])
scriptPath <- file.path(homePath,pathData$Value[pathData$Name=='scriptPath'])
outputPath <- file.path(homePath,pathData$Value[pathData$Name=='outputPath'])
setwd(outputPath)
# some control variables
mfgName <- 'DiaSorin-My'
# load functions
source(file.path(scriptPath,'ManellaHelper.R'))
shiny::runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
masterViewPath <- configDict$Value[configDict$Name=='masterViewPath']
# check the configuration file
if (file.exists(file.path(path.expand('~'),'softanageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'softanageConf.csv'))
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
masterViewPath <- configDict$Value[configDict$Name=='masterViewPath']
masterViewPath
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'softanageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'softanageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
masterViewPath <- configDict$Value[configDict$Name=='masterViewPath']
# connect to masterView database
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver, dbname = masterViewPath)
productInfos <- dbReadTable(conn,"danhMucHangHoa")
dbDisconnect(conn)
View(productInfos)
runApp('Dropbox/Desktop/NhapLieu')
dbDisconnect(conn)
runApp('Dropbox/Desktop/NhapLieu')
masterViewPath
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/TrungThienApps/LinhKienSystem')
runApp('Dropbox/Desktop/TrungThienApps/LinhKienSystem')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/TrungThienApps/LinhKienSystem')
runApp('Dropbox/Desktop/TrungThienApps/LinhKienSystem')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
runApp('Dropbox/Desktop/NhapLieu')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
View(configDict)
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
appPath
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
# translation csv
translationTable <- read.csv(file.path(appPath,'localisation.csv'))
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
# translation csv
translationTable <- read.csv(file.path(appPath,'localisation.csv'))
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
# translation csv
translationTable <- read.table(file.path(appPath,'localisation.txt'))
translationTable <- read.table(file.path(appPath,'localisation.txt'))
translationTable <- read.table(file.path(appPath,'localisation.txt'),sep='\t')
View(translationTable)
View(configDict)
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
localDBPath <- file.path(appPath,'local.sqlite')
# connect to masterView database
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver, dbname = masterViewPath)
productInfos <- dbReadTable(conn,"productInfo")
dbDisconnect(conn)
# read localisation file
connl <- dbConnect(sqlite.driver, dbname = localDBPath)
localisation <- dbReadTable(connl,"localisation")
dbDisconnect(connl)
View(localisation)
appLang <- configDict$Value[configDict$Name=='language']
appLang
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appLang <- configDict$Value[configDict$Name=='language']
appLang
appLang
localisation <- localisation[localisation$lang==appLang]
localisation
runApp()
runApp()
# This file can be placed anywhere, but need the invenageConf.csv to work
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appLang <- configDict$Value[configDict$Name=='language']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
localDBPath <- file.path(appPath,'local.sqlite')
# connect to masterView database
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver, dbname = masterViewPath)
productInfos <- dbReadTable(conn,"productInfo")
localisation <- dbReadTable(conn,"localisation")
dbDisconnect(conn)
# use the configured language
localisation <- localisation[localisation$lang==appLang]
# This file can be placed anywhere, but need the invenageConf.csv to work
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appLang <- configDict$Value[configDict$Name=='language']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
masterViewPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='masterViewPath'])
runApp()
coreDBPath
dbDisconnect(conn)
conn <- dbConnect(sqlite.driver, dbname = 'coreDBPath')
productInfos <- dbReadTable(conn,"productInfo")
dbDisconnect(conn)
# This file can be placed anywhere, but need the invenageConf.csv to work
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appLang <- configDict$Value[configDict$Name=='language']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
coreDBPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='coreDBPath'])
# connect to masterView database
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver, dbname = coreDBPath)
productInfos <- dbReadTable(conn,"productInfo")
localisation <- dbReadTable(conn,"localisation")
dbDisconnect(conn)
# use the configured language
localisation <- localisation[localisation$lang==appLang]
View(localisation)
# --------------------- Configure Basic Information ----------------------------
# check the configuration file
if (file.exists(file.path(path.expand('~'),'invenageConf.csv'))){
configDict <- read.csv(file.path(path.expand('~'),'invenageConf.csv'),
stringsAsFactors = F)
}else{
stop('softanageConf.csv not found!')
}
companyName <- configDict$Value[configDict$Name=='companyName']
appLang <- configDict$Value[configDict$Name=='language']
appPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='appPath'])
coreDBPath <- file.path(path.expand('~'),
configDict$Value[configDict$Name=='coreDBPath'])
# connect to masterView database
sqlite.driver <- dbDriver("SQLite")
conn <- dbConnect(sqlite.driver, dbname = coreDBPath)
productInfos <- dbReadTable(conn,"productInfo")
localisation <- dbReadTable(conn,"localisation")
dbDisconnect(conn)
View(localisation)
localisation[localisation$lang==appLang]
localisation <- localisation[localisation$lang==appLang,]
View(localisation)
runApp()
runApp()
runApp()
runApp()
